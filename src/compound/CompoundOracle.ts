/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace UniswapConfig {
  export type TokenConfigStruct = {
    underlying: PromiseOrValue<string>;
    symbolHash: PromiseOrValue<BytesLike>;
    baseUnit: PromiseOrValue<BigNumberish>;
    priceSource: PromiseOrValue<BigNumberish>;
    fixedPrice: PromiseOrValue<BigNumberish>;
    uniswapMarket: PromiseOrValue<string>;
    reporter: PromiseOrValue<string>;
    reporterMultiplier: PromiseOrValue<BigNumberish>;
    isUniswapReversed: PromiseOrValue<boolean>;
  };

  export type TokenConfigStructOutput = [
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    underlying: string;
    symbolHash: string;
    baseUnit: BigNumber;
    priceSource: number;
    fixedPrice: BigNumber;
    uniswapMarket: string;
    reporter: string;
    reporterMultiplier: BigNumber;
    isUniswapReversed: boolean;
  };
}

export interface CompoundOracleInterface extends utils.Interface {
  functions: {
    "ETH_BASE_UNIT()": FunctionFragment;
    "EXP_SCALE()": FunctionFragment;
    "MAX_INTEGER()": FunctionFragment;
    "MAX_TOKENS()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "activateFailover(bytes32)": FunctionFragment;
    "anchorPeriod()": FunctionFragment;
    "deactivateFailover(bytes32)": FunctionFragment;
    "getTokenConfig(uint256)": FunctionFragment;
    "getTokenConfigByReporter(address)": FunctionFragment;
    "getTokenConfigBySymbol(string)": FunctionFragment;
    "getTokenConfigBySymbolHash(bytes32)": FunctionFragment;
    "getTokenConfigByUnderlying(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "lowerBoundAnchorRatio()": FunctionFragment;
    "numTokens()": FunctionFragment;
    "owner()": FunctionFragment;
    "pokeFailedOverPrice(bytes32)": FunctionFragment;
    "price(string)": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upperBoundAnchorRatio()": FunctionFragment;
    "validate(uint256,int256,uint256,int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_BASE_UNIT"
      | "EXP_SCALE"
      | "MAX_INTEGER"
      | "MAX_TOKENS"
      | "acceptOwnership"
      | "activateFailover"
      | "anchorPeriod"
      | "deactivateFailover"
      | "getTokenConfig"
      | "getTokenConfigByReporter"
      | "getTokenConfigBySymbol"
      | "getTokenConfigBySymbolHash"
      | "getTokenConfigByUnderlying"
      | "getUnderlyingPrice"
      | "lowerBoundAnchorRatio"
      | "numTokens"
      | "owner"
      | "pokeFailedOverPrice"
      | "price"
      | "prices"
      | "transferOwnership"
      | "upperBoundAnchorRatio"
      | "validate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETH_BASE_UNIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXP_SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_INTEGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateFailover",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "anchorPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateFailover",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByReporter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbolHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByUnderlying",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lowerBoundAnchorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeFailedOverPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upperBoundAnchorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_BASE_UNIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXP_SCALE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_INTEGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TOKENS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateFailover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFailover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbolHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerBoundAnchorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeFailedOverPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upperBoundAnchorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {
    "FailoverActivated(bytes32)": EventFragment;
    "FailoverDeactivated(bytes32)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceGuarded(bytes32,uint256,uint256)": EventFragment;
    "PriceUpdated(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FailoverActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailoverDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceGuarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface FailoverActivatedEventObject {
  symbolHash: string;
}
export type FailoverActivatedEvent = TypedEvent<
  [string],
  FailoverActivatedEventObject
>;

export type FailoverActivatedEventFilter =
  TypedEventFilter<FailoverActivatedEvent>;

export interface FailoverDeactivatedEventObject {
  symbolHash: string;
}
export type FailoverDeactivatedEvent = TypedEvent<
  [string],
  FailoverDeactivatedEventObject
>;

export type FailoverDeactivatedEventFilter =
  TypedEventFilter<FailoverDeactivatedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceGuardedEventObject {
  symbolHash: string;
  reporterPrice: BigNumber;
  anchorPrice: BigNumber;
}
export type PriceGuardedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PriceGuardedEventObject
>;

export type PriceGuardedEventFilter = TypedEventFilter<PriceGuardedEvent>;

export interface PriceUpdatedEventObject {
  symbolHash: string;
  price: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface CompoundOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CompoundOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_BASE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXP_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_INTEGER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    anchorPeriod(overrides?: CallOverrides): Promise<[number]>;

    deactivateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenConfig(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigByReporter(
      reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigBySymbolHash(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigByUnderlying(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    numTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pokeFailedOverPrice(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { price: BigNumber; failoverActive: boolean }
    >;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    validate(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      currentAnswer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_INTEGER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateFailover(
    symbolHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  anchorPeriod(overrides?: CallOverrides): Promise<number>;

  deactivateFailover(
    symbolHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenConfig(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigByReporter(
    reporter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigBySymbol(
    symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigBySymbolHash(
    symbolHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigByUnderlying(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getUnderlyingPrice(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  numTokens(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pokeFailedOverPrice(
    symbolHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(
    symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prices(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { price: BigNumber; failoverActive: boolean }
  >;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  validate(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    currentAnswer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_INTEGER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    activateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    anchorPeriod(overrides?: CallOverrides): Promise<number>;

    deactivateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenConfig(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigByReporter(
      reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigBySymbolHash(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigByUnderlying(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pokeFailedOverPrice(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    price(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { price: BigNumber; failoverActive: boolean }
    >;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    validate(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      currentAnswer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "FailoverActivated(bytes32)"(
      symbolHash?: PromiseOrValue<BytesLike> | null
    ): FailoverActivatedEventFilter;
    FailoverActivated(
      symbolHash?: PromiseOrValue<BytesLike> | null
    ): FailoverActivatedEventFilter;

    "FailoverDeactivated(bytes32)"(
      symbolHash?: PromiseOrValue<BytesLike> | null
    ): FailoverDeactivatedEventFilter;
    FailoverDeactivated(
      symbolHash?: PromiseOrValue<BytesLike> | null
    ): FailoverDeactivatedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceGuarded(bytes32,uint256,uint256)"(
      symbolHash?: PromiseOrValue<BytesLike> | null,
      reporterPrice?: null,
      anchorPrice?: null
    ): PriceGuardedEventFilter;
    PriceGuarded(
      symbolHash?: PromiseOrValue<BytesLike> | null,
      reporterPrice?: null,
      anchorPrice?: null
    ): PriceGuardedEventFilter;

    "PriceUpdated(bytes32,uint256)"(
      symbolHash?: PromiseOrValue<BytesLike> | null,
      price?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      symbolHash?: PromiseOrValue<BytesLike> | null,
      price?: null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    ETH_BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_INTEGER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    anchorPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenConfig(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigByReporter(
      reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigBySymbolHash(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigByUnderlying(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pokeFailedOverPrice(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    validate(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      currentAnswer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_BASE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXP_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_INTEGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    anchorPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateFailover(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenConfig(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigByReporter(
      reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigBySymbol(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigBySymbolHash(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigByUnderlying(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowerBoundAnchorRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeFailedOverPrice(
      symbolHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upperBoundAnchorRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validate(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      currentAnswer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
