/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StEthInterface extends utils.Interface {
  functions: {
    "resume()": FunctionFragment;
    "name()": FunctionFragment;
    "stop()": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "STAKING_CONTROL_ROLE()": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "getSharesByPooledEth(uint256)": FunctionFragment;
    "isStakingPaused()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "getOperators()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "setStakingLimit(uint256,uint256)": FunctionFragment;
    "RESUME_ROLE()": FunctionFragment;
    "decimals()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "DEPOSIT_ROLE()": FunctionFragment;
    "DEPOSIT_SIZE()": FunctionFragment;
    "getTotalPooledEther()": FunctionFragment;
    "PAUSE_ROLE()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "isStopped()": FunctionFragment;
    "MANAGE_WITHDRAWAL_KEY()": FunctionFragment;
    "getBufferedEther()": FunctionFragment;
    "receiveELRewards()": FunctionFragment;
    "getELRewardsWithdrawalLimit()": FunctionFragment;
    "SIGNATURE_LENGTH()": FunctionFragment;
    "getWithdrawalCredentials()": FunctionFragment;
    "getCurrentStakeLimit()": FunctionFragment;
    "setELRewardsWithdrawalLimit(uint16)": FunctionFragment;
    "handleOracleReport(uint256,uint256)": FunctionFragment;
    "getStakeLimitFullInfo()": FunctionFragment;
    "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE()": FunctionFragment;
    "getELRewardsVault()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "resumeStaking()": FunctionFragment;
    "getFeeDistribution()": FunctionFragment;
    "getPooledEthByShares(uint256)": FunctionFragment;
    "setELRewardsVault(address)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "MANAGE_PROTOCOL_CONTRACTS_ROLE()": FunctionFragment;
    "appId()": FunctionFragment;
    "getOracle()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "setFeeDistribution(uint16,uint16,uint16)": FunctionFragment;
    "setFee(uint16)": FunctionFragment;
    "transferShares(address,uint256)": FunctionFragment;
    "depositBufferedEther(uint256)": FunctionFragment;
    "depositBufferedEther()": FunctionFragment;
    "symbol()": FunctionFragment;
    "MANAGE_FEE()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "submit(address)": FunctionFragment;
    "WITHDRAWAL_CREDENTIALS_LENGTH()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "PUBKEY_LENGTH()": FunctionFragment;
    "SET_EL_REWARDS_VAULT_ROLE()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "getDepositContract()": FunctionFragment;
    "getBeaconStat()": FunctionFragment;
    "removeStakingLimit()": FunctionFragment;
    "BURN_ROLE()": FunctionFragment;
    "getFee()": FunctionFragment;
    "kernel()": FunctionFragment;
    "getTotalShares()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "setProtocolContracts(address,address,address)": FunctionFragment;
    "setWithdrawalCredentials(bytes32)": FunctionFragment;
    "STAKING_PAUSE_ROLE()": FunctionFragment;
    "burnShares(address,uint256)": FunctionFragment;
    "sharesOf(address)": FunctionFragment;
    "pauseStaking()": FunctionFragment;
    "getTotalELRewardsCollected()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "resume"
      | "name"
      | "stop"
      | "hasInitialized"
      | "approve"
      | "STAKING_CONTROL_ROLE"
      | "initialize"
      | "getInsuranceFund"
      | "totalSupply"
      | "getSharesByPooledEth"
      | "isStakingPaused"
      | "transferFrom"
      | "getOperators"
      | "getEVMScriptExecutor"
      | "setStakingLimit"
      | "RESUME_ROLE"
      | "decimals"
      | "getRecoveryVault"
      | "DEPOSIT_ROLE"
      | "DEPOSIT_SIZE"
      | "getTotalPooledEther"
      | "PAUSE_ROLE"
      | "increaseAllowance"
      | "getTreasury"
      | "isStopped"
      | "MANAGE_WITHDRAWAL_KEY"
      | "getBufferedEther"
      | "receiveELRewards"
      | "getELRewardsWithdrawalLimit"
      | "SIGNATURE_LENGTH"
      | "getWithdrawalCredentials"
      | "getCurrentStakeLimit"
      | "setELRewardsWithdrawalLimit"
      | "handleOracleReport"
      | "getStakeLimitFullInfo"
      | "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE"
      | "getELRewardsVault"
      | "balanceOf"
      | "resumeStaking"
      | "getFeeDistribution"
      | "getPooledEthByShares"
      | "setELRewardsVault"
      | "allowRecoverability"
      | "MANAGE_PROTOCOL_CONTRACTS_ROLE"
      | "appId"
      | "getOracle"
      | "getInitializationBlock"
      | "setFeeDistribution"
      | "setFee"
      | "transferShares"
      | "depositBufferedEther(uint256)"
      | "depositBufferedEther()"
      | "symbol"
      | "MANAGE_FEE"
      | "transferToVault"
      | "canPerform"
      | "submit"
      | "WITHDRAWAL_CREDENTIALS_LENGTH"
      | "decreaseAllowance"
      | "getEVMScriptRegistry"
      | "PUBKEY_LENGTH"
      | "SET_EL_REWARDS_VAULT_ROLE"
      | "transfer"
      | "getDepositContract"
      | "getBeaconStat"
      | "removeStakingLimit"
      | "BURN_ROLE"
      | "getFee"
      | "kernel"
      | "getTotalShares"
      | "allowance"
      | "isPetrified"
      | "setProtocolContracts"
      | "setWithdrawalCredentials"
      | "STAKING_PAUSE_ROLE"
      | "burnShares"
      | "sharesOf"
      | "pauseStaking"
      | "getTotalELRewardsCollected"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CONTROL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesByPooledEth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "RESUME_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPooledEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MANAGE_WITHDRAWAL_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBufferedEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveELRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getELRewardsWithdrawalLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalCredentials",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStakeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setELRewardsWithdrawalLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleReport",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeLimitFullInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getELRewardsVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPooledEthByShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setELRewardsVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_PROTOCOL_CONTRACTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistribution",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferShares",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBufferedEther(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBufferedEther()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MANAGE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_CREDENTIALS_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBKEY_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_EL_REWARDS_VAULT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeaconStat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStakingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BURN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolContracts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalCredentials",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_PAUSE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnShares",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalELRewardsCollected",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CONTROL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesByPooledEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESUME_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPooledEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PAUSE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_WITHDRAWAL_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBufferedEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveELRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getELRewardsWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setELRewardsWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeLimitFullInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getELRewardsVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPooledEthByShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setELRewardsVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_PROTOCOL_CONTRACTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBufferedEther(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBufferedEther()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MANAGE_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_CREDENTIALS_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBKEY_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_EL_REWARDS_VAULT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeaconStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BURN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_PAUSE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalELRewardsCollected",
    data: BytesLike
  ): Result;

  events: {
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
    "TransferShares(address,address,uint256)": EventFragment;
    "SharesBurnt(address,uint256,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "Resumed()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "StakingPaused()": EventFragment;
    "StakingResumed()": EventFragment;
    "StakingLimitSet(uint256,uint256)": EventFragment;
    "StakingLimitRemoved()": EventFragment;
    "ProtocolContactsSet(address,address,address)": EventFragment;
    "FeeSet(uint16)": EventFragment;
    "FeeDistributionSet(uint16,uint16,uint16)": EventFragment;
    "ELRewardsReceived(uint256)": EventFragment;
    "ELRewardsWithdrawalLimitSet(uint256)": EventFragment;
    "WithdrawalCredentialsSet(bytes32)": EventFragment;
    "ELRewardsVaultSet(address)": EventFragment;
    "Submitted(address,uint256,address)": EventFragment;
    "Unbuffered(uint256)": EventFragment;
    "Withdrawal(address,uint256,uint256,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesBurnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingLimitRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolContactsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ELRewardsReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ELRewardsWithdrawalLimitSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalCredentialsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ELRewardsVaultSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbuffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface TransferSharesEventObject {
  from: string;
  to: string;
  sharesValue: BigNumber;
}
export type TransferSharesEvent = TypedEvent<
  [string, string, BigNumber],
  TransferSharesEventObject
>;

export type TransferSharesEventFilter = TypedEventFilter<TransferSharesEvent>;

export interface SharesBurntEventObject {
  account: string;
  preRebaseTokenAmount: BigNumber;
  postRebaseTokenAmount: BigNumber;
  sharesAmount: BigNumber;
}
export type SharesBurntEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SharesBurntEventObject
>;

export type SharesBurntEventFilter = TypedEventFilter<SharesBurntEvent>;

export interface StoppedEventObject {}
export type StoppedEvent = TypedEvent<[], StoppedEventObject>;

export type StoppedEventFilter = TypedEventFilter<StoppedEvent>;

export interface ResumedEventObject {}
export type ResumedEvent = TypedEvent<[], ResumedEventObject>;

export type ResumedEventFilter = TypedEventFilter<ResumedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface StakingPausedEventObject {}
export type StakingPausedEvent = TypedEvent<[], StakingPausedEventObject>;

export type StakingPausedEventFilter = TypedEventFilter<StakingPausedEvent>;

export interface StakingResumedEventObject {}
export type StakingResumedEvent = TypedEvent<[], StakingResumedEventObject>;

export type StakingResumedEventFilter = TypedEventFilter<StakingResumedEvent>;

export interface StakingLimitSetEventObject {
  maxStakeLimit: BigNumber;
  stakeLimitIncreasePerBlock: BigNumber;
}
export type StakingLimitSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  StakingLimitSetEventObject
>;

export type StakingLimitSetEventFilter = TypedEventFilter<StakingLimitSetEvent>;

export interface StakingLimitRemovedEventObject {}
export type StakingLimitRemovedEvent = TypedEvent<
  [],
  StakingLimitRemovedEventObject
>;

export type StakingLimitRemovedEventFilter =
  TypedEventFilter<StakingLimitRemovedEvent>;

export interface ProtocolContactsSetEventObject {
  oracle: string;
  treasury: string;
  insuranceFund: string;
}
export type ProtocolContactsSetEvent = TypedEvent<
  [string, string, string],
  ProtocolContactsSetEventObject
>;

export type ProtocolContactsSetEventFilter =
  TypedEventFilter<ProtocolContactsSetEvent>;

export interface FeeSetEventObject {
  feeBasisPoints: number;
}
export type FeeSetEvent = TypedEvent<[number], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface FeeDistributionSetEventObject {
  treasuryFeeBasisPoints: number;
  insuranceFeeBasisPoints: number;
  operatorsFeeBasisPoints: number;
}
export type FeeDistributionSetEvent = TypedEvent<
  [number, number, number],
  FeeDistributionSetEventObject
>;

export type FeeDistributionSetEventFilter =
  TypedEventFilter<FeeDistributionSetEvent>;

export interface ELRewardsReceivedEventObject {
  amount: BigNumber;
}
export type ELRewardsReceivedEvent = TypedEvent<
  [BigNumber],
  ELRewardsReceivedEventObject
>;

export type ELRewardsReceivedEventFilter =
  TypedEventFilter<ELRewardsReceivedEvent>;

export interface ELRewardsWithdrawalLimitSetEventObject {
  limitPoints: BigNumber;
}
export type ELRewardsWithdrawalLimitSetEvent = TypedEvent<
  [BigNumber],
  ELRewardsWithdrawalLimitSetEventObject
>;

export type ELRewardsWithdrawalLimitSetEventFilter =
  TypedEventFilter<ELRewardsWithdrawalLimitSetEvent>;

export interface WithdrawalCredentialsSetEventObject {
  withdrawalCredentials: string;
}
export type WithdrawalCredentialsSetEvent = TypedEvent<
  [string],
  WithdrawalCredentialsSetEventObject
>;

export type WithdrawalCredentialsSetEventFilter =
  TypedEventFilter<WithdrawalCredentialsSetEvent>;

export interface ELRewardsVaultSetEventObject {
  executionLayerRewardsVault: string;
}
export type ELRewardsVaultSetEvent = TypedEvent<
  [string],
  ELRewardsVaultSetEventObject
>;

export type ELRewardsVaultSetEventFilter =
  TypedEventFilter<ELRewardsVaultSetEvent>;

export interface SubmittedEventObject {
  sender: string;
  amount: BigNumber;
  referral: string;
}
export type SubmittedEvent = TypedEvent<
  [string, BigNumber, string],
  SubmittedEventObject
>;

export type SubmittedEventFilter = TypedEventFilter<SubmittedEvent>;

export interface UnbufferedEventObject {
  amount: BigNumber;
}
export type UnbufferedEvent = TypedEvent<[BigNumber], UnbufferedEventObject>;

export type UnbufferedEventFilter = TypedEventFilter<UnbufferedEvent>;

export interface WithdrawalEventObject {
  sender: string;
  tokenAmount: BigNumber;
  sentFromBuffer: BigNumber;
  pubkeyHash: string;
  etherAmount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface StEth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StEthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    STAKING_CONTROL_ROLE(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _depositContract: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _operators: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSharesByPooledEth(
      _ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isStakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOperators(overrides?: CallOverrides): Promise<[string]>;

    getEVMScriptExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setStakingLimit(
      _maxStakeLimit: PromiseOrValue<BigNumberish>,
      _stakeLimitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEPOSIT_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPooledEther(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    isStopped(overrides?: CallOverrides): Promise<[boolean]>;

    MANAGE_WITHDRAWAL_KEY(overrides?: CallOverrides): Promise<[string]>;

    getBufferedEther(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveELRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getELRewardsWithdrawalLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SIGNATURE_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWithdrawalCredentials(overrides?: CallOverrides): Promise<[string]>;

    getCurrentStakeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    setELRewardsWithdrawalLimit(
      _limitPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleOracleReport(
      _beaconValidators: PromiseOrValue<BigNumberish>,
      _beaconBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStakeLimitFullInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isStakingPaused: boolean;
        isStakingLimitSet: boolean;
        currentStakeLimit: BigNumber;
        maxStakeLimit: BigNumber;
        maxStakeLimitGrowthBlocks: BigNumber;
        prevStakeLimit: BigNumber;
        prevStakeBlockNumber: BigNumber;
      }
    >;

    SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getELRewardsVault(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    resumeStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        treasuryFeeBasisPoints: number;
        insuranceFeeBasisPoints: number;
        operatorsFeeBasisPoints: number;
      }
    >;

    getPooledEthByShares(
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setELRewardsVault(
      _executionLayerRewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    MANAGE_PROTOCOL_CONTRACTS_ROLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    getOracle(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeDistribution(
      _treasuryFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _insuranceFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _operatorsFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferShares(
      _recipient: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositBufferedEther(uint256)"(
      _maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositBufferedEther()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    MANAGE_FEE(overrides?: CallOverrides): Promise<[string]>;

    transferToVault(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    submit(
      _referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    WITHDRAWAL_CREDENTIALS_LENGTH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    PUBKEY_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_EL_REWARDS_VAULT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDepositContract(overrides?: CallOverrides): Promise<[string]>;

    getBeaconStat(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        depositedValidators: BigNumber;
        beaconValidators: BigNumber;
        beaconBalance: BigNumber;
      }
    >;

    removeStakingLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    BURN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      overrides?: CallOverrides
    ): Promise<[number] & { feeBasisPoints: number }>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    getTotalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    setProtocolContracts(
      _oracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalCredentials(
      _withdrawalCredentials: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    STAKING_PAUSE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    burnShares(
      _account: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharesOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pauseStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalELRewardsCollected(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  resume(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  stop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  approve(
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  STAKING_CONTROL_ROLE(overrides?: CallOverrides): Promise<string>;

  initialize(
    _depositContract: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _operators: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _insuranceFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getSharesByPooledEth(
    _ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isStakingPaused(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    _sender: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOperators(overrides?: CallOverrides): Promise<string>;

  getEVMScriptExecutor(
    _script: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setStakingLimit(
    _maxStakeLimit: PromiseOrValue<BigNumberish>,
    _stakeLimitIncreasePerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  RESUME_ROLE(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  DEPOSIT_ROLE(overrides?: CallOverrides): Promise<string>;

  DEPOSIT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPooledEther(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    _spender: PromiseOrValue<string>,
    _addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  isStopped(overrides?: CallOverrides): Promise<boolean>;

  MANAGE_WITHDRAWAL_KEY(overrides?: CallOverrides): Promise<string>;

  getBufferedEther(overrides?: CallOverrides): Promise<BigNumber>;

  receiveELRewards(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getELRewardsWithdrawalLimit(overrides?: CallOverrides): Promise<BigNumber>;

  SIGNATURE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawalCredentials(overrides?: CallOverrides): Promise<string>;

  getCurrentStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  setELRewardsWithdrawalLimit(
    _limitPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleOracleReport(
    _beaconValidators: PromiseOrValue<BigNumberish>,
    _beaconBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStakeLimitFullInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isStakingPaused: boolean;
      isStakingLimitSet: boolean;
      currentStakeLimit: BigNumber;
      maxStakeLimit: BigNumber;
      maxStakeLimitGrowthBlocks: BigNumber;
      prevStakeLimit: BigNumber;
      prevStakeBlockNumber: BigNumber;
    }
  >;

  SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(
    overrides?: CallOverrides
  ): Promise<string>;

  getELRewardsVault(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resumeStaking(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFeeDistribution(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      treasuryFeeBasisPoints: number;
      insuranceFeeBasisPoints: number;
      operatorsFeeBasisPoints: number;
    }
  >;

  getPooledEthByShares(
    _sharesAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setELRewardsVault(
    _executionLayerRewardsVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  MANAGE_PROTOCOL_CONTRACTS_ROLE(overrides?: CallOverrides): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeDistribution(
    _treasuryFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _insuranceFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _operatorsFeeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferShares(
    _recipient: PromiseOrValue<string>,
    _sharesAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositBufferedEther(uint256)"(
    _maxDeposits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositBufferedEther()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  MANAGE_FEE(overrides?: CallOverrides): Promise<string>;

  transferToVault(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    _params: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  submit(
    _referral: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  WITHDRAWAL_CREDENTIALS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseAllowance(
    _spender: PromiseOrValue<string>,
    _subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  PUBKEY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  SET_EL_REWARDS_VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

  transfer(
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDepositContract(overrides?: CallOverrides): Promise<string>;

  getBeaconStat(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      depositedValidators: BigNumber;
      beaconValidators: BigNumber;
      beaconBalance: BigNumber;
    }
  >;

  removeStakingLimit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  BURN_ROLE(overrides?: CallOverrides): Promise<string>;

  getFee(overrides?: CallOverrides): Promise<number>;

  kernel(overrides?: CallOverrides): Promise<string>;

  getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  setProtocolContracts(
    _oracle: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _insuranceFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalCredentials(
    _withdrawalCredentials: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  STAKING_PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

  burnShares(
    _account: PromiseOrValue<string>,
    _sharesAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharesOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pauseStaking(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalELRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    resume(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    stop(overrides?: CallOverrides): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    STAKING_CONTROL_ROLE(overrides?: CallOverrides): Promise<string>;

    initialize(
      _depositContract: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _operators: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesByPooledEth(
      _ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStakingPaused(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOperators(overrides?: CallOverrides): Promise<string>;

    getEVMScriptExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setStakingLimit(
      _maxStakeLimit: PromiseOrValue<BigNumberish>,
      _stakeLimitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<string>;

    DEPOSIT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPooledEther(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    isStopped(overrides?: CallOverrides): Promise<boolean>;

    MANAGE_WITHDRAWAL_KEY(overrides?: CallOverrides): Promise<string>;

    getBufferedEther(overrides?: CallOverrides): Promise<BigNumber>;

    receiveELRewards(overrides?: CallOverrides): Promise<void>;

    getELRewardsWithdrawalLimit(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalCredentials(overrides?: CallOverrides): Promise<string>;

    getCurrentStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setELRewardsWithdrawalLimit(
      _limitPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleOracleReport(
      _beaconValidators: PromiseOrValue<BigNumberish>,
      _beaconBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakeLimitFullInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isStakingPaused: boolean;
        isStakingLimitSet: boolean;
        currentStakeLimit: BigNumber;
        maxStakeLimit: BigNumber;
        maxStakeLimitGrowthBlocks: BigNumber;
        prevStakeLimit: BigNumber;
        prevStakeBlockNumber: BigNumber;
      }
    >;

    SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(
      overrides?: CallOverrides
    ): Promise<string>;

    getELRewardsVault(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resumeStaking(overrides?: CallOverrides): Promise<void>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        treasuryFeeBasisPoints: number;
        insuranceFeeBasisPoints: number;
        operatorsFeeBasisPoints: number;
      }
    >;

    getPooledEthByShares(
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setELRewardsVault(
      _executionLayerRewardsVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    MANAGE_PROTOCOL_CONTRACTS_ROLE(overrides?: CallOverrides): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeDistribution(
      _treasuryFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _insuranceFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _operatorsFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferShares(
      _recipient: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositBufferedEther(uint256)"(
      _maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositBufferedEther()"(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    MANAGE_FEE(overrides?: CallOverrides): Promise<string>;

    transferToVault(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    submit(
      _referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WITHDRAWAL_CREDENTIALS_LENGTH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    PUBKEY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    SET_EL_REWARDS_VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDepositContract(overrides?: CallOverrides): Promise<string>;

    getBeaconStat(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        depositedValidators: BigNumber;
        beaconValidators: BigNumber;
        beaconBalance: BigNumber;
      }
    >;

    removeStakingLimit(overrides?: CallOverrides): Promise<void>;

    BURN_ROLE(overrides?: CallOverrides): Promise<string>;

    getFee(overrides?: CallOverrides): Promise<number>;

    kernel(overrides?: CallOverrides): Promise<string>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    setProtocolContracts(
      _oracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalCredentials(
      _withdrawalCredentials: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    STAKING_PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

    burnShares(
      _account: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseStaking(overrides?: CallOverrides): Promise<void>;

    getTotalELRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: PromiseOrValue<string> | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: PromiseOrValue<string> | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): RecoverToVaultEventFilter;

    "TransferShares(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      sharesValue?: null
    ): TransferSharesEventFilter;
    TransferShares(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      sharesValue?: null
    ): TransferSharesEventFilter;

    "SharesBurnt(address,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      preRebaseTokenAmount?: null,
      postRebaseTokenAmount?: null,
      sharesAmount?: null
    ): SharesBurntEventFilter;
    SharesBurnt(
      account?: PromiseOrValue<string> | null,
      preRebaseTokenAmount?: null,
      postRebaseTokenAmount?: null,
      sharesAmount?: null
    ): SharesBurntEventFilter;

    "Stopped()"(): StoppedEventFilter;
    Stopped(): StoppedEventFilter;

    "Resumed()"(): ResumedEventFilter;
    Resumed(): ResumedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "StakingPaused()"(): StakingPausedEventFilter;
    StakingPaused(): StakingPausedEventFilter;

    "StakingResumed()"(): StakingResumedEventFilter;
    StakingResumed(): StakingResumedEventFilter;

    "StakingLimitSet(uint256,uint256)"(
      maxStakeLimit?: null,
      stakeLimitIncreasePerBlock?: null
    ): StakingLimitSetEventFilter;
    StakingLimitSet(
      maxStakeLimit?: null,
      stakeLimitIncreasePerBlock?: null
    ): StakingLimitSetEventFilter;

    "StakingLimitRemoved()"(): StakingLimitRemovedEventFilter;
    StakingLimitRemoved(): StakingLimitRemovedEventFilter;

    "ProtocolContactsSet(address,address,address)"(
      oracle?: null,
      treasury?: null,
      insuranceFund?: null
    ): ProtocolContactsSetEventFilter;
    ProtocolContactsSet(
      oracle?: null,
      treasury?: null,
      insuranceFund?: null
    ): ProtocolContactsSetEventFilter;

    "FeeSet(uint16)"(feeBasisPoints?: null): FeeSetEventFilter;
    FeeSet(feeBasisPoints?: null): FeeSetEventFilter;

    "FeeDistributionSet(uint16,uint16,uint16)"(
      treasuryFeeBasisPoints?: null,
      insuranceFeeBasisPoints?: null,
      operatorsFeeBasisPoints?: null
    ): FeeDistributionSetEventFilter;
    FeeDistributionSet(
      treasuryFeeBasisPoints?: null,
      insuranceFeeBasisPoints?: null,
      operatorsFeeBasisPoints?: null
    ): FeeDistributionSetEventFilter;

    "ELRewardsReceived(uint256)"(amount?: null): ELRewardsReceivedEventFilter;
    ELRewardsReceived(amount?: null): ELRewardsReceivedEventFilter;

    "ELRewardsWithdrawalLimitSet(uint256)"(
      limitPoints?: null
    ): ELRewardsWithdrawalLimitSetEventFilter;
    ELRewardsWithdrawalLimitSet(
      limitPoints?: null
    ): ELRewardsWithdrawalLimitSetEventFilter;

    "WithdrawalCredentialsSet(bytes32)"(
      withdrawalCredentials?: null
    ): WithdrawalCredentialsSetEventFilter;
    WithdrawalCredentialsSet(
      withdrawalCredentials?: null
    ): WithdrawalCredentialsSetEventFilter;

    "ELRewardsVaultSet(address)"(
      executionLayerRewardsVault?: null
    ): ELRewardsVaultSetEventFilter;
    ELRewardsVaultSet(
      executionLayerRewardsVault?: null
    ): ELRewardsVaultSetEventFilter;

    "Submitted(address,uint256,address)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      referral?: null
    ): SubmittedEventFilter;
    Submitted(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      referral?: null
    ): SubmittedEventFilter;

    "Unbuffered(uint256)"(amount?: null): UnbufferedEventFilter;
    Unbuffered(amount?: null): UnbufferedEventFilter;

    "Withdrawal(address,uint256,uint256,bytes32,uint256)"(
      sender?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sentFromBuffer?: null,
      pubkeyHash?: PromiseOrValue<BytesLike> | null,
      etherAmount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      sender?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sentFromBuffer?: null,
      pubkeyHash?: PromiseOrValue<BytesLike> | null,
      etherAmount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    STAKING_CONTROL_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _depositContract: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _operators: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesByPooledEth(
      _ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOperators(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStakingLimit(
      _maxStakeLimit: PromiseOrValue<BigNumberish>,
      _stakeLimitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPooledEther(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    isStopped(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGE_WITHDRAWAL_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    getBufferedEther(overrides?: CallOverrides): Promise<BigNumber>;

    receiveELRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getELRewardsWithdrawalLimit(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalCredentials(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setELRewardsWithdrawalLimit(
      _limitPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleOracleReport(
      _beaconValidators: PromiseOrValue<BigNumberish>,
      _beaconBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStakeLimitFullInfo(overrides?: CallOverrides): Promise<BigNumber>;

    SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getELRewardsVault(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resumeStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    getPooledEthByShares(
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setELRewardsVault(
      _executionLayerRewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowRecoverability(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MANAGE_PROTOCOL_CONTRACTS_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeDistribution(
      _treasuryFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _insuranceFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _operatorsFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferShares(
      _recipient: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositBufferedEther(uint256)"(
      _maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositBufferedEther()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submit(
      _referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    WITHDRAWAL_CREDENTIALS_LENGTH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    PUBKEY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    SET_EL_REWARDS_VAULT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDepositContract(overrides?: CallOverrides): Promise<BigNumber>;

    getBeaconStat(overrides?: CallOverrides): Promise<BigNumber>;

    removeStakingLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    BURN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    setProtocolContracts(
      _oracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalCredentials(
      _withdrawalCredentials: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    STAKING_PAUSE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    burnShares(
      _account: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharesOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalELRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    STAKING_CONTROL_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _depositContract: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _operators: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSharesByPooledEth(
      _ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStakingLimit(
      _maxStakeLimit: PromiseOrValue<BigNumberish>,
      _stakeLimitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSIT_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPooledEther(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGE_WITHDRAWAL_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBufferedEther(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveELRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getELRewardsWithdrawalLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawalCredentials(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStakeLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setELRewardsWithdrawalLimit(
      _limitPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleOracleReport(
      _beaconValidators: PromiseOrValue<BigNumberish>,
      _beaconBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStakeLimitFullInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getELRewardsVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resumeStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPooledEthByShares(
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setELRewardsVault(
      _executionLayerRewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGE_PROTOCOL_CONTRACTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeDistribution(
      _treasuryFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _insuranceFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _operatorsFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferShares(
      _recipient: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositBufferedEther(uint256)"(
      _maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositBufferedEther()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToVault(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submit(
      _referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    WITHDRAWAL_CREDENTIALS_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PUBKEY_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_EL_REWARDS_VAULT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDepositContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeaconStat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStakingLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    BURN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setProtocolContracts(
      _oracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalCredentials(
      _withdrawalCredentials: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    STAKING_PAUSE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnShares(
      _account: PromiseOrValue<string>,
      _sharesAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharesOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalELRewardsCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
